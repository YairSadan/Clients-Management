generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  role                Role          @default(CLIENT)
  fundingSource       String?
  notes               String?
  phone               String        @unique
  pricePerAppointment Int
  accounts            Account[]
  Appointment         Appointment[]
  sessions            Session[]
}

model AuthrizedPool {
  email               String  @unique
  phone               String  @unique
  fundingSource       String?
  id                  String  @id @default(cuid())
  name                String
  notes               String?
  pricePerAppointment Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id        String   @id @default(cuid())
  start     DateTime
  end       DateTime
  userId    String?
  title     String
  completed Boolean  @default(false)
  payed     Boolean  @default(false)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CLIENT
}
